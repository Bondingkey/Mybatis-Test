<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- namespace要和你要映射的接口的全类名一样 -->
<mapper namespace="com.gzc.mapper.EmployeeMapper">

    <!-- 开启二级缓存 设置属性-->
<!--    <cache eviction="FIFO" flushInterval="60000" size="1024" readOnly="false"></cache>-->
    <cache></cache>
    
    <!-- sql可以提取重复的代码片段 -->
    <sql id="selectEmp">
        select
            id,
            last_name name,
            salary,
            email
        from
            tbl_employee
    </sql>
    
<!-- 标签名是你要做的数据库操作，id属性是接口中对应的方法名，在涉及到查询时要用到resultType的结果集类型，写全类名或别名 -->
<!-- 有时候进行多表查询时，resultType就不能用了，需要使用resultMap -->
    <select id="selectEmpById"  resultType="employee">
<!-- 引用提取出来的sql片段 -->
        <include refid="selectEmp"></include>
        where
            id = #{empId};

    </select>
<!-- 在添加的时候使用主键生成策略，并把添加的对象的主键值保存到id中 -->
<!-- keyProperty通常放入的是表中的主键字段名 -->
<!-- 写参数的时候,如果接口的方法的入参写的是POJO类型的入参,则到了映射文件中的占位符里写的就是相应POJO的属性 -->
    <insert id="insertEmp" useGeneratedKeys="true" keyProperty="id">

        insert into
            tbl_employee(last_name, email, salary)
        VALUE
            (#{name},#{email},#{salary})

    </insert>

    <delete id="deleteEmployeeById">

        delete from
            tbl_employee
        where
            id = #{empId};

    </delete>
<!-- 写参数的时候,如果接口的方法的入参写的是POJO类型的入参,则到了映射文件中的占位符里写的就是相应POJO的属性 -->
    <update id="updateEmployeeById">
        update
            tbl_employee
        set
            last_name=#{name},
            email=#{email},
            salary=#{salary}
        where
            id = #{id}
    </update>

    <select id="selectAllEmp" resultType="employee">
        select
            last_name name,
            email,
            salary
        from
            tbl_employee
    </select>

    <select id="selectEmpByNameAndSalary" resultType="employee">
        select
            id,
            last_name name,
            email,
            salary
        from
            tbl_employee
        where
            last_name=#{nametest}
        and
            salary=#{salarytest}
    </select>

    <select id="selectEmpByNameAndSalaryByMap" resultType="employee">
        select
            id,
            last_name name,
            email,
            salary
        from
            tbl_employee
        where
            last_name=#{nameeee}
        and
            salary=#{sa}
    </select>

<!-- $占位符的使用,用来替换不支持?的情况,如from XX -->
    <select id="selectEmpByTable" resultType="employee">
        select
            id,
            last_name name,
            email,
            salary
        from
            ${tablename}
    </select>

<!-- //查询单行数据保存到Map集合中 -->
    <select id="selectEmpByIdPutMap" resultType="map">
        select
            id,
            last_name name,
            email,
            salary
        from
            tbl_employee
        where
            id = #{empId};
    </select>

    <select id="selectAllEmpPutMap">
        select
            id,
            last_name name,
            email,
            salary
        from
            tbl_employee
    </select>

<!-- 根据id查询员工以及员工所属部门(多表联合查询实验) -->
    <!-- 自定义映射:员工与部门的关系 -->
    <!-- id里面是自定义映射的名字课随便起,type类似以那个实体类的形式体现 -->
    <resultMap id="EmpAndDeptResultMap" type="employee">
        <!-- id标签为主键标签,result为非主键标签,column里写表字段名,property写对象属性名,从此建立关联 -->
        <id column="id" property="id"></id>
        <result column="last_name" property="name"></result>
        <result column="email" property="email"></result>
        <result column="salary" property="salary"></result>
        <!-- 为第二张表建立映射 -->
        <result column="dept_id" property="dept.deptId"></result>
        <result column="dept_name" property="dept.deptName"></result>
    </resultMap>

    <select id="selectEmpAndDeptById" resultMap="EmpAndDeptResultMap">
        select
            e.id,
            e.last_name,
            e.email,
            e.salary,
            d.dept_id,
            d.dept_name
        from
            tbl_dept d,
            tbl_employee e
        where
            d.dept_id=e.dept_id
        and
            e.id=#{empid}
    </select>

<!-- 根据id查询员工以及员工所属部门(association自定义映射实验) -->
    <resultMap id="EmpAndDeptResultMapAssociation" type="employee">
        <!-- id标签为主键标签,result为非主键标签,column里写表字段名,property写对象属性名,从此建立关联 -->
        <id column="id" property="id"></id>
        <result column="last_name" property="name"></result>
        <result column="email" property="email"></result>
        <result column="salary" property="salary"></result>
        <!-- 为第二张表建立映射 -->
        <!-- property里填属性的名称,javaType中填属性的类型的全类名 -->
        <association property="dept" javaType="com.gzc.pojo.Dept">
            <id column="dept_id" property="deptId"></id>
            <result column="dept_name" property="deptName"></result>
        </association>
    </resultMap>

    <select id="selectEmpAndDeptByIdAssociation" resultMap="EmpAndDeptResultMapAssociation">

        select
            e.id,
            e.last_name,
            e.email,
            e.salary,
            d.dept_id,
            d.dept_name
        from
            tbl_dept d,
            tbl_employee e
        where
            d.dept_id=e.dept_id
        and
            e.id=#{empid}
    </select>

<!-- 根据id查询员工以及员工所属部门(association分布查询实验) -->
    <!-- 1,先根据id查询员工 -->
    <!-- 2,根据部门id查询部门 -->
    <resultMap id="selectEmpAndDeptByIdAssociationStep" type="employee">
        <id column="id" property="id"></id>
        <result column="last_name" property="name"></result>
        <result column="email" property="email"></result>
        <result column="salary" property="salary"></result>
        <!-- 分布查询,需要指定第二部查询的方法和参数,select为方法全路径,column是给第二步查询指定参数,fetchType为是否开启局部懒加载 -->
        <!-- 不要忘记去配置信息注册第二部的xml文件 -->
        <association property="dept" select="com.gzc.mapper.DeptMapper.selectDeptById" column="dept" fetchType="lazy">
        </association>
    </resultMap>
    
    <select id="selectEmpAndDeptByIdAssociationStep" resultMap="selectEmpAndDeptByIdAssociationStep">
        select
            id,
            last_name,
            email,
            salary,
            dept_id dept
        from
            tbl_employee
        where
            id=#{id}
    </select>

<!-- coll分布查询第二步 -->
    <select id="selectEmpByDeptId" resultType="employee">
        select
            id,
            last_name name,
            email,
            salary,
            dept_id
        from
            tbl_employee
        where
            dept_id=#{did}
    </select>

<!-- 跟据不确定的参数查询员工:动态SQL之if-where -->
    <select id="selectEmpByObject" resultType="employee">
        select
            id,
            last_name name,
            email,
            salary
        from
            tbl_employee
        <!-- test后面的是属性,等号前的是数据库字段,#{}里面的是传过来的参数 -->
        <where>
            <if test="id != null">
                id = #{id}
            </if>
            <if test="name != null">
                and last_name = #{name}
            </if>
            <if test="email !=null">
                and email = #{email}
            </if>
            <if test="salary !=null">
                and salary = #{salary}
            </if>
        </where>
    </select>

<!-- 跟据不确定的参数查询员工:动态SQL之trim -->
    <select id="selectEmpByObjectOfTrim" resultType="employee">
        select
            id,
            last_name name,
            email,
            salary
        from
            tbl_employee
        <trim prefix="where" suffixOverrides="and">
            <if test="id != null">
                id = #{id} and
            </if>
            <if test="name != null">
                 last_name = #{name} and
            </if>
            <if test="email !=null">
                 email = #{email} and
            </if>
            <if test="salary !=null">
                 salary = #{salary}
            </if>
        </trim>
    </select>

<!-- 跟据不确定的参数修改员工:动态SQL之set -->
    <update id="updateEmpByObject">
        update
            tbl_employee
        <set>
            <if test="name != null">
                last_name = #{name},
            </if>
            <if test="email !=null">
                email= #{email},
            </if>
            <if test="salary!=null">
                salary= #{salary}
            </if>
        </set>
        where
            id = #{id};
    </update>

<!-- 动态SQL-when(选择结构) -->
    <select id="selectEmpChoose" resultType="employee">
        select
            id,
            last_name name,
            email,
            salary
        from
            tbl_employee
        <where>
            <choose>
                <when test="id !=null">
                    id = #{id}
                </when>
                <when test="name !=null">
                    last_name = #{name}
                </when>
                <when test="email !=null">
                    email = #{email}
                </when>
                <when test="salary !=null">
                    salary = #{salary}
                </when>
                <otherwise></otherwise>
            </choose>
        </where>
    </select>

<!-- id in (1,2,3)查询id为1,和2和3的信息 -->
<!-- foreach表示迭代,collection为要迭代的集合,item表示迭代出来的元素保存到哪里, separator表示元素之间的分隔符-->
    <select id="selectEmpByIds" resultType="employee">
        select
            id,
            last_name name,
            salary,
            email
        from
            tbl_employee
        where
            id in (
        <foreach collection="ids" item="id" separator=",">
            #{id}
        </foreach>)
    </select>

    <insert id="batchInsert">
        insert into
            tbl_employee (last_name, email, salary,dept_id)
        VALUE
        <foreach collection="empList" item="empList" separator=",">
           (#{empList.name},#{empList.email},#{empList.salary},1)
        </foreach>
    </insert>

</mapper>